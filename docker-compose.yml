version: "3.8"
services:
  db:
    image: postgres:17
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USERNAME} -d ${DATABASE_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    env_file:
      - .env
  cache:
    image: redis:8.2.1
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PASSWORD}
    volumes:
      - cache:/data
    environment:
    - REDIS_PASSWORD=${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a ${REDIS_PASSWORD} ping | grep PONG"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
  django:
    build:
     context: ./django_backend
     dockerfile: Dockerfile
    container_name: django-docker
    ports:
      - "8000:8000"
    command: >
      sh -c "
        echo 'Waiting for PostgreSQL...' &&
        while ! nc -z db 5432; do sleep 1; done &&
        echo 'PostgreSQL is up!' &&
        python manage.py migrate &&
        python manage.py shell -c 'exec(open(\"/app/init_data.py\").read())' &&
        python manage.py runserver 0.0.0.0:8000
      "
    depends_on:
      - db
      - cache
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    environment:
      PYTHONUNBUFFERED: 1
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
      DEBUG: ${DEBUG}
      DJANGO_LOGLEVEL: ${DJANGO_LOGLEVEL}
      DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS}
      DATABASE_ENGINE: ${DATABASE_ENGINE}
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_HOST: ${DATABASE_HOST}
      DATABASE_PORT: ${DATABASE_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
    env_file:
      - .env
  celery-worker:
    build:
      context: ./django_backend
      dockerfile: Dockerfile
    command: celery --app config worker -l info
    depends_on:
      - django
      - cache
    healthcheck:
      test: ["CMD-SHELL", "celery -A config inspect ping -d celery@%h || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    env_file:
      - .env
  celery-beat:
    build:
      context: ./django_backend
      dockerfile: Dockerfile
    command: celery --app config beat -l info
    depends_on:
      - django
      - cache
    env_file:
      - .env
volumes:
   postgres_data:
   cache:
